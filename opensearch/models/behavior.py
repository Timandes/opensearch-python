# coding: utf-8

"""
   Copyright 2019 Alibaba Group Holding Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""


import pprint
import re  # noqa: F401

import six

from opensearch.models.behavior_fields import BehaviorFields  # noqa: F401,E501


class Behavior(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cmd': 'str',
        'fields': 'BehaviorFields'
    }

    attribute_map = {
        'cmd': 'cmd',
        'fields': 'fields'
    }

    def __init__(self, cmd=None, fields=None):  # noqa: E501
        """Behavior - a model defined in Swagger"""  # noqa: E501

        self._cmd = None
        self._fields = None
        self.discriminator = None

        self.cmd = cmd
        self.fields = fields

    @property
    def cmd(self):
        """Gets the cmd of this Behavior.  # noqa: E501

        必选字段。定义该文档的操作行为，目前仅支持ADD  # noqa: E501

        :return: The cmd of this Behavior.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this Behavior.

        必选字段。定义该文档的操作行为，目前仅支持ADD  # noqa: E501

        :param cmd: The cmd of this Behavior.  # noqa: E501
        :type: str
        """
        if cmd is None:
            raise ValueError("Invalid value for `cmd`, must not be `None`")  # noqa: E501
        allowed_values = ["ADD"]  # noqa: E501
        if cmd not in allowed_values:
            raise ValueError(
                "Invalid value for `cmd` ({0}), must be one of {1}"  # noqa: E501
                .format(cmd, allowed_values)
            )

        self._cmd = cmd

    @property
    def fields(self):
        """Gets the fields of this Behavior.  # noqa: E501


        :return: The fields of this Behavior.  # noqa: E501
        :rtype: BehaviorFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Behavior.


        :param fields: The fields of this Behavior.  # noqa: E501
        :type: BehaviorFields
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Behavior, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Behavior):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
