# coding: utf-8

"""
   Copyright 2019 Alibaba Group Holding Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class SearchResultItemFullJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'object',
        'variable_value': 'object',
        'sort_expr_values': 'list[float]'
    }

    attribute_map = {
        'fields': 'fields',
        'variable_value': 'variableValue',
        'sort_expr_values': 'sortExprValues'
    }

    def __init__(self, fields=None, variable_value=None, sort_expr_values=None):  # noqa: E501
        """SearchResultItemFullJson - a model defined in Swagger"""  # noqa: E501

        self._fields = None
        self._variable_value = None
        self._sort_expr_values = None
        self.discriminator = None

        if fields is not None:
            self.fields = fields
        if variable_value is not None:
            self.variable_value = variable_value
        if sort_expr_values is not None:
            self.sort_expr_values = sort_expr_values

    @property
    def fields(self):
        """Gets the fields of this SearchResultItemFullJson.  # noqa: E501

        搜索召回内容  # noqa: E501

        :return: The fields of this SearchResultItemFullJson.  # noqa: E501
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchResultItemFullJson.

        搜索召回内容  # noqa: E501

        :param fields: The fields of this SearchResultItemFullJson.  # noqa: E501
        :type: object
        """

        self._fields = fields

    @property
    def variable_value(self):
        """Gets the variable_value of this SearchResultItemFullJson.  # noqa: E501

        表示自定义参数返回结果，如获取distance距离值，variableValue 节点只有在config子句的format为xml或者fulljson时才能展现出来，json格式默认不展示。  # noqa: E501

        :return: The variable_value of this SearchResultItemFullJson.  # noqa: E501
        :rtype: object
        """
        return self._variable_value

    @variable_value.setter
    def variable_value(self, variable_value):
        """Sets the variable_value of this SearchResultItemFullJson.

        表示自定义参数返回结果，如获取distance距离值，variableValue 节点只有在config子句的format为xml或者fulljson时才能展现出来，json格式默认不展示。  # noqa: E501

        :param variable_value: The variable_value of this SearchResultItemFullJson.  # noqa: E501
        :type: object
        """

        self._variable_value = variable_value

    @property
    def sort_expr_values(self):
        """Gets the sort_expr_values of this SearchResultItemFullJson.  # noqa: E501

        表示对应文档排序分。  # noqa: E501

        :return: The sort_expr_values of this SearchResultItemFullJson.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort_expr_values

    @sort_expr_values.setter
    def sort_expr_values(self, sort_expr_values):
        """Sets the sort_expr_values of this SearchResultItemFullJson.

        表示对应文档排序分。  # noqa: E501

        :param sort_expr_values: The sort_expr_values of this SearchResultItemFullJson.  # noqa: E501
        :type: list[float]
        """

        self._sort_expr_values = sort_expr_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResultItemFullJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResultItemFullJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
